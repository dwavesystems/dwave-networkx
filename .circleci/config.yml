version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test-linux:
    parameters:
      dependency-versions:
        type: string
      python-version:
        type: string

    docker:
      - image: cimg/python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: pip-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-venv-install-deps
          name: Create virtual environment and install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools wheel
            pip install -U twine
            pip install -r requirements.txt -r tests/requirements.txt

      - run:
          name: Install dependencies
          command: |
            . env/bin/activate
            pip install --upgrade << parameters.dependency-versions >>

      - save_cache: &save-cache-env
          key: pip-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - ~/.cache/pip

      - run: &run-tests
          name: Run unittests
          command: |
            . env/bin/activate
            coverage run -m unittest discover

      - run: &run-codecov
          name: Run codecov
          command: |
            . env/bin/activate
            codecov

  test-osx:
    parameters:
      python-version:
        type: string
      xcode:
        type: string
        default: "14.3.0"

    resource_class: macos.m1.medium.gen1

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      - restore_cache: &restore-cache-pyenv
          key: &brew-pyenv-cache-key v1-brew-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run:
          name: Install pyenv
          command: |
            brew install pyenv

      - run:
          name: Install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache: &save-cache-pyenv
          key: *brew-pyenv-cache-key
          paths:
            - /Users/distiller/Library/Caches/Homebrew
            - /usr/local/Homebrew
            - ~/.pyenv

      - restore_cache: *restore-cache-env

      - run:
          name: Create virtualenv and install dependencies
          command: |
            eval "$(pyenv init --path)"
            pyenv local << parameters.python-version >>
            python -m venv env
            . env/bin/activate
            python --version
            pip install pip --upgrade
            pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: *save-cache-env

      - run: *run-tests

      - run: *run-codecov

  test-win:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - run:
          name: Install python and create virtualenv
          shell: bash -eo pipefail
          command: |
            # resolve python MAJOR.MINOR version to latest MAJOR.MINOR.PATCH version available on NuGet
            full_version=$(
              curl -s 'https://azuresearch-usnc.nuget.org/query?q=python' \
              | jq -r '.data[] | select(.id == "python") .versions[] | .version' \
              | awk -F. -v ver='<< parameters.python-version >>' \
                  'index($0, ver".") == 1 && $3 >= m { m = $3; v = $0 } END { print v }'
            )
            nuget install python -Version "$full_version" -ExcludeVersion
            python/tools/python -V
            python/tools/python -m venv env

      - run:
          name: Install dependencies
          command: |
            env\Scripts\activate.ps1
            python --version
            pip install -r requirements.txt
            pip install -r tests\requirements.txt

      - run:
          name: Run unittests
          command: |
            env\Scripts\activate.ps1
            python -m unittest discover

  test-doctest:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-venv-install-deps

      - run:
          name: Install docs dependencies
          command: |
            . env/bin/activate
            pip install -r docs/requirements.txt

      - save_cache: *save-cache-env

      - run:
          name: build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  deploy:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - run: *create-venv-install-deps

      - run:
          name: Verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            [[ "$(pip show dwave-networkx 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: Build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist bdist_wheel

      - run:
          name: Upload to PyPI
          command: |
            . env/bin/activate
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

workflows:
  test:
    jobs:
      - test-linux:
          matrix:
            parameters:
              python-version: &python-versions ["3.8", "3.9", "3.10", "3.11", "3.12"]
              dependency-versions: ["dimod==0.10.8 networkx==2.4 oldest-supported-numpy",  # oldest supported
                                    "dimod networkx numpy",                                # latest
                                    ]
            exclude:
              # dimod 0.10.8 doesn't support Python 3.11+
              - python-version: "3.11"
                dependency-versions: "dimod==0.10.8 networkx==2.4 oldest-supported-numpy"
              - python-version: "3.12"
                dependency-versions: "dimod==0.10.8 networkx==2.4 oldest-supported-numpy"
      - test-osx:
          matrix:
            parameters:
              python-version: *python-versions
      - test-win:
          matrix:
            parameters:
              python-version: *python-versions
      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
